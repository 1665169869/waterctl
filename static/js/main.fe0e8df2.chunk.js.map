{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","paddingTop","display","alignItems","paper","padding","spacing","margin","width","button","marginRight","buttonProgress","color","pink","A400","position","top","left","marginTop","marginLeft","startButtonSuccess","backgroundColor","green","startButtonFailure","red","quickStartButton","textTransform","ErrorDialog","props","useState","open","setOpen","handleClose","style","whiteSpace","onClose","aria-labelledby","aria-describedby","id","errorDescription","onClick","autoFocus","App","classes","inProgress","setInProgress","percentage","setPercentage","success","setSuccess","failure","setFailure","errorMsg","setErrorMsg","supportsQuickStart","setSupportsQuickStart","useEffect","undefined","navigator","bluetooth","getDevices","lastDeviceName","setLastDeviceName","_lastDeviceName","localStorage","getItem","Object","gattServer","setGattServer","characteristic","setCharacteristic","startButtonClassname","clsx","logProgress","x","console","log","bluetoothStart","a","requestDevice","filters","namePrefix","optionalServices","bluetoothDevice","allDevices","device","name","Error","setItem","gatt","connect","getPrimaryService","service","getCharacteristic","crc16cg","CRC","checksum","compute","Buffer","from","slice","toString","checksumByteOne","parseInt","checksumByteTwo","startPayload","Uint8Array","writeValue","bluetoothEnd","endPayload","disconnect","handleBluetoothError","error","match","className","container","direction","justify","item","variant","startIcon","disabled","then","_","catch","size","value","href","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.fe0e8df2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { pink, green, red } from '@material-ui/core/colors'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport BathtubIcon from '@material-ui/icons/Bathtub'\nimport PanToolIcon from '@material-ui/icons/PanTool'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport { CRC } from 'crc-full'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      paddingTop: '20px',\n      display: 'flex',\n      alignItems: 'center',\n    },\n    paper: {\n      padding: theme.spacing(2),\n      margin: theme.spacing(1),\n      width: theme.spacing(36),\n    },\n    button: {\n      '& > *': {\n        marginRight: theme.spacing(2),\n      },\n    },\n    buttonProgress: {\n      // default secondary color\n      color: pink.A400,\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      marginTop: -12,\n      marginLeft: -12,\n    },\n    startButtonSuccess: {\n      backgroundColor: green[500],\n      '&:hover': {\n        backgroundColor: green[700],\n      },\n    },\n    startButtonFailure: {\n      backgroundColor: red[500],\n      '&:hover': {\n        backgroundColor: red[700],\n      },\n    },\n    quickStartButton: {\n      textTransform: 'none',\n    }\n  }),\n)\n\nconst App = () => {\n  const classes = useStyles()\n  const [inProgress, setInProgress] = useState(false)\n  // percentage:\n  // -1 -> indeterminate\n  // 0 to 100 -> determinate\n  const [percentage, setPercentage] = useState(0)\n  // success & failure: indicates the color of start button\n  const [success, setSuccess] = useState(false)\n  const [failure, setFailure] = useState(false)\n  // errorMsg: error messages in pop-up dialog\n  const [errorMsg, setErrorMsg] = useState(\"\")\n\n  const [supportsQuickStart, setSupportsQuickStart] = useState(false)\n  useEffect(() => {\n    if (navigator.bluetooth.getDevices !== undefined) setSupportsQuickStart(true)\n  }, [])\n\n  const [lastDeviceName, setLastDeviceName] = useState(\"\")\n  useEffect(() => {\n    let _lastDeviceName = localStorage.getItem(\"lastDeviceName\")\n    if (_lastDeviceName != null) setLastDeviceName(_lastDeviceName)\n  }, [])\n\n  const [gattServer, setGattServer] = useState(Object)\n  const [characteristic, setCharacteristic] = useState(Object)\n\n  const startButtonClassname = clsx({\n    [classes.startButtonSuccess]: success,\n    [classes.startButtonFailure]: failure,\n  })\n\n  const handleStartButtonClick = () => {\n    if (!inProgress) {\n      setErrorMsg(\"\")\n      setSuccess(false)\n      setFailure(false)\n      setInProgress(true)\n      setPercentage(-1)\n\n      bluetoothStart()\n        .then(_ => {\n          setSuccess(true)\n          setInProgress(false)\n        })\n        .catch((error) => handleBluetoothError(error))\n    }\n  }\n\n  const handleQuickStartButtonClick = () => {\n    if (!inProgress) {\n      setErrorMsg(\"\")\n      setSuccess(false)\n      setFailure(false)\n      setInProgress(true)\n      setPercentage(-1)\n\n      bluetoothStart(lastDeviceName)\n        .then(_ => {\n          setSuccess(true)\n          setInProgress(false)\n        })\n        .catch((error) => handleBluetoothError(error))\n    }\n  }\n\n  const handleEndButtonClick = () => {\n    // Always run BluetoothEnd() and reset the color of start button\n    bluetoothEnd()\n    setSuccess(false)\n    setFailure(false)\n  }\n\n  const logProgress = (x: any) => {\n    console.log(\"Current:\", x)\n    return x;\n  }\n\n  // Bluetooth control begins\n  const bluetoothStart = async (deviceName: string | undefined = undefined) => {\n    // BLE device (a.k.a peripheral) => GATT server => service => characteristic => writeValue()\n    // Step 1/5\n    let bluetoothDevice\n    if (deviceName === undefined)\n      bluetoothDevice = await navigator.bluetooth.requestDevice({\n        filters: [{ namePrefix: \"Water\" }],\n        optionalServices: [0xF1F0]\n      })\n    else {\n      const allDevices = await navigator.bluetooth.getDevices()\n      for (const device of allDevices) {\n        if (device.name === lastDeviceName) bluetoothDevice = device\n      }\n      if (bluetoothDevice === undefined) throw new Error(\"Quick start failed\")\n    }\n    logProgress(bluetoothDevice)\n    localStorage.setItem(\"lastDeviceName\", bluetoothDevice.name!);\n    setPercentage(20)\n    // Step 2/5\n    let gattServer = await bluetoothDevice.gatt!.connect()\n    setGattServer(gattServer)\n    logProgress(gattServer)\n    setPercentage(40)\n    // Step 3/5\n    let service = await gattServer.getPrimaryService(0xF1F0)\n    logProgress(service)\n    setPercentage(60)\n    // Step 4/5\n    // Target characteristic name = TXD, uuid = 0xF1F1\n    let characteristic = await service.getCharacteristic(0xF1F1)\n    setCharacteristic(characteristic)\n    logProgress(characteristic)\n    setPercentage(80)\n    // Step 5/5\n    // Generate device name checksum and fill into payload\n    // A custom CRC-16. I'll call it... CRC-16/ChangGong\n    let crc16cg = new CRC(\"CRC16\", 16, 0x8005, 0xE808, 0x0000, true, true)\n    let checksum = crc16cg.compute(Buffer.from(bluetoothDevice.name!.slice(-5), \"ascii\")).toString(16)\n    let checksumByteOne = parseInt(\"0x\" + checksum.slice(2, 4))\n    let checksumByteTwo = parseInt(\"0x\" + checksum.slice(0, 2))\n    const startPayload = new Uint8Array([0xFE, 0xFE, 0x09, 0xB2, 0x01, checksumByteOne, checksumByteTwo, 0x00, 0x70, 0xE2, 0xEB, 0x20, 0x01, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x30, 0x00])\n    console.log(\"Writing: \", startPayload)\n    await characteristic.writeValue(startPayload)\n    setPercentage(100)\n  }\n\n  const bluetoothEnd = async () => {\n    const endPayload = new Uint8Array([0xFE, 0xFE, 0x09, 0xB3, 0x00, 0x00])\n    console.log(\"Writing: \", endPayload)\n    await characteristic.writeValue(endPayload)\n    await gattServer.disconnect()\n  }\n\n  const handleBluetoothError = (error: { toString: () => string }) => {\n    setInProgress(false)\n    if (error.toString().match(/User cancelled/))\n      return // User's cancellation won't be considered as an error\n\n    setFailure(true)\n    if (!navigator.bluetooth || error.toString().match(/Bluetooth adapter not available/))\n      setErrorMsg(\"找不到蓝牙硬件，或浏览器不支持。\\n\\n限于篇幅，详情请参考下方“疑难解答”。\")\n    else if (error.toString().match(/User denied the browser permission/))\n      setErrorMsg(\"蓝牙权限遭拒。\\n\\n请前往手机设置，授予浏览器“位置信息”权限。\\n此权限不会用于定位，详情请参考下方“疑难解答”。\")\n    else if (error.toString().match(/NetworkError/))\n      setErrorMsg(\"连接不稳定，无法与水控器建立连接。\\n请重试。\")\n    else if (error.toString().match(/Quick start failed/))\n      setErrorMsg(\"快速启动暂不好使。\\n请使用传统方式启动。\")\n    else\n      setErrorMsg(\"未知错误：\\n\" + error.toString() + \"\\n\\n这可能是一个Bug，请截图并反馈给开发者。\")\n  }\n\n  return (\n    <div className={classes.root}>\n      {errorMsg && <ErrorDialog errorDescription={errorMsg} />}\n      <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"center\">\n\n        {/* Main control panel */}\n        <Grid item>\n          <Paper className={classes.paper}>\n            <div className={classes.button}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<BathtubIcon />}\n                className={startButtonClassname}\n                disabled={inProgress}\n                onClick={handleStartButtonClick}>\n                启动\n                {inProgress && percentage < 0 && <CircularProgress size={24} className={classes.buttonProgress} />}\n                {inProgress && percentage >= 0 && <CircularProgress size={24} className={classes.buttonProgress} variant=\"determinate\" value={percentage} />}\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<PanToolIcon />}\n                onClick={handleEndButtonClick}>\n                结束\n              </Button>\n            </div>\n          </Paper>\n        </Grid>\n        {supportsQuickStart && lastDeviceName !== \"\" &&\n          <Grid item>\n            <Paper className={classes.paper}>\n              <div className={classes.button}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<BathtubIcon />}\n                  className={classes.quickStartButton}\n                  disabled={inProgress}\n                  onClick={handleQuickStartButtonClick}>\n                  快速启动：{lastDeviceName}\n                </Button>\n              </div>\n            </Paper>\n          </Grid>}\n\n\n        {/* Credits */}\n        <Grid item>\n          <Paper className={classes.paper}>\n            <div className={classes.button}>\n              <Button variant=\"outlined\" href=\"https://github.com/celesWuff/waterctl/blob/master/FAQ.md\">\n                疑难解答\n              </Button>\n              <Button variant=\"outlined\" href=\"https://github.com/celesWuff/waterctl\">\n                源代码\n              </Button>\n            </div>\n          </Paper>\n        </Grid>\n\n      </Grid>\n    </div>\n  )\n}\n\nconst ErrorDialog = (props: { errorDescription: string }) => {\n  const [open, setOpen] = useState(true)\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  return (\n    <Dialog style={{ whiteSpace: \"pre-wrap\" }}\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {props.errorDescription}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\" autoFocus>\n          好\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\n// import reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log)\n"],"sourceRoot":""}